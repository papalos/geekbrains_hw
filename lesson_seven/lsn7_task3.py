# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам
# и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.


# ??? В задании.
# Чем "Объединение двух клеток" отличается от "Создается общая клетка из двух" ???? Предположим, что ничем
# Вычитание. Участвуют две клетки. А в других сколько участвуют??? Предположим, что тоже две, так как перегружаем бинарные операторы


class Cell:
    def __init__(self, n):
        self.num = int(n)
        if n < 1:
            print('Количество ячеек должно быть натуральным положительным числом')
            raise Exception

    # В соответствии с заданием "Данные методы должны применяться только к клеткам" выполняем проверку
    def _check_cell(self, other):
        if type(self) != type(other):
            print('Второй операнд не является клеткой')
            raise Exception

    def __add__(self, other):
        self._check_cell(other)
        # Проверку что разность количества ячеек двух клеток больше нуля вынес в конструктор,
        # как я понял клетка должна иметь хотябы одну ячейку при любых операциях
        # и нельзя позволять создавать клетки с отрицательным значением ячеек
        return Cell(self.num + other.num)

    def __sub__(self, other):
        self._check_cell(other)
        return Cell(self.num - other.num)

    def __mul__(self, other):
        self._check_cell(other)
        return Cell(self.num * other.num)

    def __truediv__(self, other):
        self._check_cell(other)
        return Cell(self.num // other.num)

    def make_order(self, row):
        _str = ''
        for i in range(self.num//row):
            _str += '*'*row + '\n'
        if self.num % row:
            _str += '*'*(self.num % row)
        return _str


if __name__ == '__main__':
    a = Cell(20)
    b = Cell(10)

    print((a+b).make_order(7))
    print('')
    print((a-b).make_order(3))
    print('')
    print((a*b).make_order(21))
    print('')
    print((a/b).make_order(1))
